fieldMap.xml, fieldThresholds.xml, uniqueFieldModifications.xml, validTestNames.xml, and STARS.Applications.VETS.Plugins.VTS.Interface.dll.config (found at C:\Program Files (x86)\SRH Systems\STARS\VETS) allow for the VTS-VETS interface tool to be configured. 


feildMap.xml describes the field mapping between VETS and VTS. Each <Entry> element describes one mapping. <VTSTag> should be the string literal of the field name in VTS as it appears in day-sched.xml. <VETSTag> should be the string literal of the field name in VETS as it appears in the resource data file (e.g. C:\Program Files (x86)\SRH Systems\STARS\Root\UserData\Libraries\VETS Data\Tests\Hello World Test\Data.dat). <VETSResourceType> should be "Tests", "Fuels", "Vehicles", or "SamplingConfiguration" depending upon which resource type the field belongs to in VETS. To add a new mapping entry: load VETS, add a Custom Field to the desired resource type, use the name (not display label) of the custom field in <VETSTag>.


fieldThresholds.xml describes limits on numeric field values. <Name> is the feildMap.xml <VETSTag> or feildMap.xml <VTSTag> of the field, <High> is the upper limit on the numeric field value and <Low> is the lower limit on the numeric field value. A numeric field value which is less than the <Low> limit will be set to the <Low> limit. A numeric field value which is greater than the <High> limit will be set to the <High> limit. Non numeric <Low> and <High> limit entries will be ignored and evaluation will not take place for that limit.  If a non-numeric field value is sent through a threshold check it will be evaluated as having numeric value '0' and will adjusted accordingly based on the limits specified. i.e. field value 7, low limit 1, high limit 5 -> field value 5. field value 7, low limit 1, high limit "hello" -> field value 7. field value 7, low limit 6, high limit "hello" -> field value 6. field value "hi", low limit 1, high limit 10 -> field value 1. field value "hi", low limit -1, high limit 10 -> field value "hi".


uniqueFieldModification.xml describes unique modifications to specified field values. It can be used to add unit conversion functionality (e.g. VTS wheelbase is measured in inches, VETS wheelbase is measured in m, therefore VETS field value = VTS field value * 0.0254. Each <Case> element allows for one if, else if, else conditional. "@" denotes the value of a field such that "@Hello" will be representative of the value of a field having the name "Hello". The <VETSTag> or <VTSTag> name from fieldMap.xml can be used for this purpose. In each case if the <Condition> of the <If> element is met then the <Then> of the <If> element will be executed, similarly, if the <Condition> of an <ElseIf> element is met then the <Then> of the <ElseIf> element will be executed. Multiple <ElseIf> elements may be specified. If no condition of the <If> or <ElseIf> elements are met then the code of the <Else> element will be executed. In the <Condition> code use: "==" to denote equal to, "!=" to denote not equal to, "&gt;" to denote greater than, "&lt;" to denote less than, "&gt;=" to denote greater than or equal to, "&lt;=" to denote less than or equal to, "&amp;&amp;" to denote boolean and, "||" to denote boolean or. Assign to a field in the form of @FieldTag = "some string". Numerical operations are also allowed e.g. @NonMethaneHCHtoCRatio = (12 * ((1 / @FuelNMHCCarbonMassFraction) - 1)). Multiple assignments in a sinlge <Then> element are also allowed, so long as each individual assignment in seperated by a new line.


validTestNames.xml acts as a filter to the types of VTS tests in daySched.xml which will show up in the VTS-VETS utility page view within STARS VETS. Each <Test> element describes a single test type which will be included in the view. <VTSTestCode> corresponds to the value of the field having <VETSTag> "TestTypeCode". This is a custom field on VETS tests and is mapped to <VTSTag> "TEST_TYPE_CODE" in fieldMap.xml. Changing the <VETSTag> "TestTypeCode" in fieldMap.xml will break the code behind validTestNames.xml functionality, so it is advised not to do so. The <VTSTag> "TEST_TYPE_CODE" can be changed however if need be, so long as the new tag name points to the VTS field which contains information to be used for the purposes of test type filtering. <TestProcedureName> is the name (display name) of the test procedure resource which will be tied to the top level test resource in VETS. This test procedure resource should be apropriately chosen for the indicated VTS test type code (i.e. <VTSTestCode> EC1 -> <TestProcedureName> EPA 75 3 Bag). <ShiftListName> is the name (display name) of the shift list resource which will be tied to the top level test resource in VETS. This shift list resource should be apropriately chosen for the indicated VTS test type code and must contain the <TestProcedureName> resource in its configuration (i.e. <VTSTestCode> EC1 -> <ShiftListName> EPA 75 3 Bag AT).


STARS.Applications.VETS.Plugins.VTS.Interface.dll.config contains configurable string constants which denote paths to resources such as the SharedFolder, names of resources such as fieldMap.xml, as well as boolean values to configure specific dll functionality. "TestResourceName", "FuelResourceName", etc, are used to denote the names of VETS resources which VTS information is imported into and which are tied to the top level test resource within VETS. The names of the VTS resources within VETS can be configured by changing these entries and updating the names within VETS accordingly. "CheckThresholdValues" is a boolean "false" or "true" (anything other than "true" is interpretted as "false") which determines whether the dll checks threshold values during vts data import. If false threshold values are ignored. Default is false. InformUserOfFieldsOutsideThreshold is a boolean which determines whether threshold violations are brought to the attention of the operator during vts data import. If false the operator will not be visually informed of violations, but if CheckThresholdValues is true the violations will be handled in the background. Default is false. InformUserOfInvalidTests is a boolean which determines if the operator is informed of tests in day-shed.xml which do not meet the filter requirements specified in validTestNames.xml. If set to true, any test having a test type code not listed in validTestNames.xml will be brought to the attention of the operator upon vts data reload. Defualt is false. CrossReferencePreconditionOnTestRun determines whether precondition information is to be cross referenced upon test run. Functionality is at present incomplete. Default is false. NullValueKey is a string which denotes a custom value to be interpretted as null value. If NullValueKey = "-1" for example then any VTS field having value "-1" will be interpretted as having a null value, and the value passed to VETS will be set to null according to the value type of the field in VETS, i.e. strings -> empty string, int -> 0, double -> 0.0, boolean -> false. Default value is empty string.


Warning: changes to any of the above 5 configurable files will have an effect on dll functionality immediatley. VETS does not need to be restarted for changes to take effect. It is reccommended that backups of the configurable files are taken before any changes are attempted. 